name: Rust CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-14, ubuntu-latest]
        rust: [stable, nightly]
        include:
          - os: macos-14
            target: aarch64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}
        override: true
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Check formatting
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --all -- --check
      
    - name: Lint with clippy
      uses: actions-rs/cargo@v1
      with:
        command: clippy
        args: -- -D warnings
        
    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --all-features
        
    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --all-features
        
    - name: Generate documentation
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      uses: actions-rs/cargo@v1
      with:
        command: doc
        args: --no-deps
        
  python-integration:
    name: Python MLX Integration
    runs-on: macos-14
    needs: build
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Run Python tests
      run: |
        python -m pytest python/tests/ -v
        
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, python-integration]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v3
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false 